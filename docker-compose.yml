version: '3.8'

services:
  # Frontend Development Server
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3000
    depends_on:
      - backend
    networks:
      - cropguard-network

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app/backend
      - /app/backend/node_modules
      - ./backend/data:/app/backend/data
    environment:
      - NODE_ENV=development
      - PORT=3000
      - JWT_SECRET=dev-secret-key-change-in-production
      - DATABASE_URL=file:./data/cropguard.db
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=debug
    depends_on:
      - redis
      - postgres
    networks:
      - cropguard-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - cropguard-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for production data (optional)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=cropguard
      - POSTGRES_USER=cropguard
      - POSTGRES_PASSWORD=cropguard_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cropguard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cropguard -d cropguard"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - cropguard-network
    profiles:
      - production

volumes:
  redis_data:
  postgres_data:
  nginx_logs:

networks:
  cropguard-network:
    driver: bridge